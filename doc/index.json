[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/index.js",
    "content": "//MVCEventEmitter class slightly modified from\n//https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#_Simple_implementation_of_EventTarget\nclass MVCEventEmitter {\n  constructor() {\n    this.listeners = {};\n  }\n\n  addEventListener(type, callback) {\n    if (!(type in this.listeners)) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(callback);\n  }\n\n  removeEventListener(type, callback) {\n    if (!(type in this.listeners)) {\n      return;\n    }\n    var stack = this.listeners[type];\n    for (var i = 0, l = stack.length; i < l; i++) {\n      if (stack[i] === callback) {\n        stack.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  dispatchEvent(event) {\n    if (!(event.type in this.listeners)) {\n      return true;\n    }\n    var stack = this.listeners[event.type].slice();\n\n    for (var i = 0, l = stack.length; i < l; i++) {\n      stack[i].call(this, event);\n    }\n    return !event.defaultPrevented;\n  }\n}\n\nclass Model extends MVCEventEmitter {\n  constructor(dataModel) {\n    super();\n    for (let k of Object.keys(dataModel)) {\n\n      Object.defineProperty(this, k, {\n        innumerable: true,\n        get: () => {\n          return dataModel[k];\n        },\n        set: (val) => {\n          dataModel[k] = val;\n          let e = new CustomEvent(`mvc-propertychanged`, {\n            detail: {\n              model: dataModel,\n              property: k,\n              value: val\n            }\n          });\n          this.dispatchEvent(e);\n        }\n      });\n    }\n\n    //TODO: determine whether access to the model is required\n    Object.defineProperty(this, 'model', {\n      innumerable: true,\n      get: () => {\n        return dataModel;\n      }\n    });\n\n    let modify = (val) => {\n      Object.assign(dataModel, val);\n      //In some situations, it may be too computationally\n      //intensive to make updates to all listeners to model,\n      //so providing a list of the properties and values that\n      //were changed and the raw val object as \"updates\" so\n      //that only the updates are necessary to process\n      let e = new CustomEvent('mvc-modelmodified', {\n        detail: {\n          updates: val,\n          model: dataModel,\n          properties: [Object.keys(val)],\n          values: [Object.values(val)]\n        }\n      });\n\n      this.dispatchEvent(e);\n    };\n\n    Object.defineProperty(this, 'modify', {\n      value: modify\n    });\n  }\n\n}\n\nclass View extends MVCEventEmitter {\n  constructor(viewDOM, model) {\n    super();\n\n    let observers = viewDOM.querySelectorAll('[mvc-observes]');\n    let controls = viewDOM.querySelectorAll('[mvc-controls]');\n\n\n    function getControlValue(control) {\n      switch (control.tagName) {\n        case \"INPUT\":\n          return control.value;\n          //case \"TEXTAREA\":\n          //return control.innerHTML;\n        default:\n          return control.innerHTML;\n      }\n    }\n\n    function updateObserver(observer, value) {\n      switch (observer.tagName) {\n        //TODO: write adapter for each observer\n        //TODO: implement custom handlers\n        case \"INPUT\":\n          observer.value = value;\n          break;\n        //case \"SELECT\":\n        default:\n          observer.innerHTML = value;\n          break;\n      }\n    }\n\n    for (let i = 0; i < controls.length; i++) {\n      let controlledValues = controls[i].getAttribute('mvc-controls').split(',');\n      for (let val in controlledValues) {\n        controls[i].addEventListener('change', (e) => {\n          let ce = new CustomEvent(`mvc-inputchanged`, {\n            target: e.target,\n            detail: {\n              property: controlledValues[val],\n              value: getControlValue(controls[i])\n            }\n          });\n          model[controlledValues[val]] = getControlValue(controls[i]);\n          this.dispatchEvent(ce);\n        });\n      }\n    }\n\n    for (let i = 0; i < observers.length; i++) {\n      let observedValues = observers[i].getAttribute('mvc-observes').split(',');\n      for (let val in observedValues) {\n        model.addEventListener(`mvc-propertychanged`, (e) => {\n          if (observedValues[val] === e.detail.property && e.target !== observers[i]) {\n            updateObserver(observers[i], e.detail.value);\n          }\n        });\n      }\n    }\n\n    model.addEventListener(`mvc-modelmodified`, (e) => {\n      for (let i = 0; i < observers.length; i++) {\n        let observedValues = observers[i].getAttribute('mvc-observes').split(',');\n        for (let val in observedValues) {\n          updateObserver(observers[i], e.detail.updates[observedValues[val]]);\n        }\n      }\n    });\n  }\n}\n\nexport {\n  Model,\n  View\n};\n",
    "static": true,
    "longname": "C:/Users/Christopher/git/micro-mvc/src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "MVCEventEmitter",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~MVCEventEmitter",
    "access": null,
    "export": false,
    "importPath": "micro-mvc/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~MVCEventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MVCEventEmitter#constructor",
    "access": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "listeners",
    "memberof": "src/index.js~MVCEventEmitter",
    "static": false,
    "longname": "src/index.js~MVCEventEmitter#listeners",
    "access": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 4,
    "kind": "method",
    "name": "addEventListener",
    "memberof": "src/index.js~MVCEventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MVCEventEmitter#addEventListener",
    "access": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true
  },
  {
    "__docId__": 5,
    "kind": "method",
    "name": "removeEventListener",
    "memberof": "src/index.js~MVCEventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MVCEventEmitter#removeEventListener",
    "access": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "method",
    "name": "dispatchEvent",
    "memberof": "src/index.js~MVCEventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~MVCEventEmitter#dispatchEvent",
    "access": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 7,
    "kind": "class",
    "name": "Model",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~Model",
    "access": null,
    "export": true,
    "importPath": "micro-mvc/src/index.js",
    "importStyle": "{Model}",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "interface": false,
    "extends": [
      "MVCEventEmitter"
    ]
  },
  {
    "__docId__": 8,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~Model#constructor",
    "access": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 9,
    "kind": "class",
    "name": "View",
    "memberof": "src/index.js",
    "static": true,
    "longname": "src/index.js~View",
    "access": null,
    "export": true,
    "importPath": "micro-mvc/src/index.js",
    "importStyle": "{View}",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "interface": false,
    "extends": [
      "MVCEventEmitter"
    ]
  },
  {
    "__docId__": 10,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/index.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/index.js~View#constructor",
    "access": null,
    "description": null,
    "lineNumber": 100,
    "undocument": true
  },
  {
    "kind": "index",
    "content": "# micro-mvc\n\nThis package exposes two very basic classes that can be used to create an MVC application \n\nFurther documentation to come \n\n",
    "longname": "C:\\Users\\Christopher\\git\\micro-mvc\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"micro-mvc\",\n    \"version\": \"1.0.0\",\n    \"description\": \"I minimal MVC tool\",\n    \"main\": \"lib/micro-mvc.js\",\n    \"dependencies\": {},\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.5.0\",\n        \"@babel/core\": \"^7.5.4\",\n        \"@babel/plugin-transform-runtime\": \"^7.5.0\",\n        \"@babel/preset-env\": \"^7.5.4\",\n        \"@babel/runtime\": \"^7.5.4\",\n        \"babelify\": \"^10.0.0\",\n        \"browserify\": \"^16.3.0\",\n        \"esdoc\": \"^1.1.0\",\n        \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n        \"mocha\": \"^6.1.4\",\n        \"uglify-js\": \"^3.6.0\"\n    },\n    \"scripts\": {\n        \"test\": \"mocha\",\n        \"build\": \"esdoc && babel src/index.js -o lib/micro-mvc.js -s && browserify src/index.js -d -s mvc -t [ babelify ] | uglifyjs > dist/micro-mvc.min.js\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git+ssh://git@bitbucket.org/theOutLiar/micro-mvc.git\"\n    },\n    \"babel\": {\n        \"presets\": [\n            \"@babel/env\"\n        ],\n        \"plugins\": [\n            \"module:@babel/plugin-transform-runtime\"\n        ]\n    },\n    \"esdoc\": {\n        \"source\": \"./src\",\n        \"destination\": \"./doc\",\n        \"plugins\": [\n            {\n                \"name\": \"esdoc-ecmascript-proposal-plugin\",\n                \"option\": {\n                    \"all\": true\n                }\n            }\n        ]\n    },\n    \"author\": \"Christopher J Gore\",\n    \"license\": \"MIT\",\n    \"homepage\": \"https://bitbucket.org/theOutLiar/micro-mvc#readme\"\n}\n",
    "longname": "C:\\Users\\Christopher\\git\\micro-mvc\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]