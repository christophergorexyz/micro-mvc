[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/config.js",
    "content": "/**\n * A prefix for use for custom event, attribute, and element names\n */\nconst APP_PREFIX = 'mvc';\n\n/**\n * A custom attribute which directs the view to observe a particular value of the model\n */\nexport const MVC_OBSERVES = `${APP_PREFIX}-observes`;\n\n/**\n * A custom attribute which directs the view to update a particular value of the model\n */\nexport const MVC_CONTROLS = `${APP_PREFIX}-controls`;\n\n/**\n * A custom attribute which ensures that events are triggered properly for radio inputs\n */\nexport const MVC_RADIO_GROUP = `${APP_PREFIX}-radio-group`;\n\n/**\n * A custom attribute which ensures that events are triggered properly for checkbox inputs\n */\nexport const MVC_CHECK_GROUP = `${APP_PREFIX}-check-group`;\n\n/**\n * A custom event name for when multiple properties of a model have been modified\n */\nexport const MVC_MODEL_MODIFIED = `${APP_PREFIX}-model-modified`;\n\n/**\n * A custom event name for when a single property of a model has been modified\n */\nexport const MVC_PROPERTY_CHANGED = `${APP_PREFIX}-property-changed`;\n\n/**\n * A custom event name for when an input in a View has been updated\n */\nexport const MVC_INPUT_CHANGED = `${APP_PREFIX}-input-changed`;\n\n/**\n * The name of the custom element defined by MVCView\n * @experimental this may be deprecated in the future\n */\nexport const MVC_VIEW_ELEMENT = `${APP_PREFIX}-view`;\n",
    "static": true,
    "longname": "/home/christopher/git/micro-mvc/src/config.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "APP_PREFIX",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~APP_PREFIX",
    "access": "public",
    "export": false,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": null,
    "description": "A prefix for use for custom event, attribute, and element names",
    "lineNumber": 4,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "MVC_OBSERVES",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_OBSERVES",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_OBSERVES}",
    "description": "A custom attribute which directs the view to observe a particular value of the model",
    "lineNumber": 9,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "MVC_CONTROLS",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_CONTROLS",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_CONTROLS}",
    "description": "A custom attribute which directs the view to update a particular value of the model",
    "lineNumber": 14,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "MVC_RADIO_GROUP",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_RADIO_GROUP",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_RADIO_GROUP}",
    "description": "A custom attribute which ensures that events are triggered properly for radio inputs",
    "lineNumber": 19,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "MVC_CHECK_GROUP",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_CHECK_GROUP",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_CHECK_GROUP}",
    "description": "A custom attribute which ensures that events are triggered properly for checkbox inputs",
    "lineNumber": 24,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "MVC_MODEL_MODIFIED",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_MODEL_MODIFIED",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_MODEL_MODIFIED}",
    "description": "A custom event name for when multiple properties of a model have been modified",
    "lineNumber": 29,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "MVC_PROPERTY_CHANGED",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_PROPERTY_CHANGED",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_PROPERTY_CHANGED}",
    "description": "A custom event name for when a single property of a model has been modified",
    "lineNumber": 34,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "MVC_INPUT_CHANGED",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_INPUT_CHANGED",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_INPUT_CHANGED}",
    "description": "A custom event name for when an input in a View has been updated",
    "lineNumber": 39,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "MVC_VIEW_ELEMENT",
    "memberof": "src/config.js",
    "static": true,
    "longname": "src/config.js~MVC_VIEW_ELEMENT",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/config.js",
    "importStyle": "{MVC_VIEW_ELEMENT}",
    "description": "The name of the custom element defined by MVCView",
    "lineNumber": 45,
    "experimental": "this may be deprecated in the future",
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "file",
    "name": "src/custom-elements/mvc-view.js",
    "content": "import View from '../view';\nimport Model from '../model';\n\n/**\n * This class is a custom HTMLElement that provides some syntactic sugar for setting up Views and Models\n * @experimental This class is an experimental featue, and may not be valid in the future\n */\nexport default class MVCView extends HTMLElement {\n    /**\n     * Simply call the super() constructor\n     */\n    constructor() {\n        super();\n    }\n\n    /**\n     * Adds a form around the content slot\n     */\n    connectedCallback() {\n        /**\n         * @type {object}\n         */\n        this._shadow = this.attachShadow({\n            mode: 'open'\n        });\n        let formNode = document.createElement('form');\n        let slot = document.createElement('slot');\n        formNode.append(slot);\n        this._shadow.appendChild(formNode);\n    }\n\n    /**\n     * Return the model for the view. May be null if model has not been supplied yet.\n     * @type {object}\n     */\n    get model() {\n        return this._model;\n    }\n\n    /**\n     * Set the model the view will observe and modify.\n     * @param {object} model An object to be turned into an MVC Model\n     */\n    set model(model) {\n        if (this._model) {\n            throw new Error('The model may only be set once.');\n        }\n\n        /**\n         * The Model instance encapsulated by this element\n         * @type {object}\n         */\n        this._model = new Model(model);\n\n        /**\n         * The View instance encapsulated by this element\n         * @type {object}\n         */\n        this._view = new View(this, this._model);\n    }\n}\n",
    "static": true,
    "longname": "/home/christopher/git/micro-mvc/src/custom-elements/mvc-view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 59,
    "kind": "class",
    "name": "MVCView",
    "memberof": "src/custom-elements/mvc-view.js",
    "static": true,
    "longname": "src/custom-elements/mvc-view.js~MVCView",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/custom-elements/mvc-view.js",
    "importStyle": "MVCView",
    "description": "This class is a custom HTMLElement that provides some syntactic sugar for setting up Views and Models",
    "lineNumber": 8,
    "experimental": "This class is an experimental featue, and may not be valid in the future",
    "interface": false,
    "extends": [
      "HTMLElement"
    ]
  },
  {
    "__docId__": 60,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#constructor",
    "access": "public",
    "description": "Simply call the super() constructor",
    "lineNumber": 12
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "connectedCallback",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#connectedCallback",
    "access": "public",
    "description": "Adds a form around the content slot",
    "lineNumber": 19,
    "params": [],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_shadow",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#_shadow",
    "access": "private",
    "description": "",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "get",
    "name": "model",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#model",
    "access": "public",
    "description": "Return the model for the view. May be null if model has not been supplied yet.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "set",
    "name": "model",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#model",
    "access": "public",
    "description": "Set the model the view will observe and modify.",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "An object to be turned into an MVC Model"
      }
    ]
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_model",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#_model",
    "access": "private",
    "description": "The Model instance encapsulated by this element",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_view",
    "memberof": "src/custom-elements/mvc-view.js~MVCView",
    "static": false,
    "longname": "src/custom-elements/mvc-view.js~MVCView#_view",
    "access": "private",
    "description": "The View instance encapsulated by this element",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/event-emitter.js",
    "content": "/**\n * The EventEmitter class is modified from a snippet by MDN Contributers at \n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#_Simple_implementation_of_EventTarget \n * Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/ \n *\n * This enables custom classes to dispatch events, and is used by micro-mvc to establish observers\n * and fulfill the Model-View-Controller design pattern\n */\n\nexport default class EventEmitter {\n    /**\n     * This class is intended to be extended or composed into other classes.\n     */\n    constructor() {\n        /**\n         * Listeners for each event type\n         * @type {object}\n         */\n        this.listeners = {};\n    }\n\n    /**\n     * Add an event listener\n     * @param {string} type The name of the event\n     * @param {function} callback The function to execute upon occurence of the event\n     */\n    addEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    }\n\n    /**\n     * Remove an even listner\n     * @param {string} type The name of the event\n     * @param {function} callback The function to stop executing upon occurence of the event\n     */\n    removeEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Dispatch an event. Upon dispatching an event, all listeners are called\n     * @param {object} event The `Event` that needs to be dispatched.\n     * @return {boolean} returns the inverse of `event.defaultPrevented`\n     */\n    dispatchEvent(event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    }\n\n    /**\n     * Check whether the instance has listeners for the provided event type\n     * @return {boolean} true if there is a listener for this event type, otherwise false\n     * @param {string} type The type of event to check for\n     */\n    listensFor(type) {\n        return !!this.listeners[type];\n    }\n\n    /**\n     * Check whether the instance has a specific listener for the provided event type\n     * @return {boolean} true if the callback exists for this event type, otherwise false\n     * @param {string} type The type of event to check for\n     * @param {function} callback The specific callback to check for\n     */\n    hasListener(type, callback) {\n        return !!this.listeners[type] ? this.listeners[type].indexOf(callback) >= 0 : false;\n    }\n}\n",
    "static": true,
    "longname": "/home/christopher/git/micro-mvc/src/event-emitter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "class",
    "name": "EventEmitter",
    "memberof": "src/event-emitter.js",
    "static": true,
    "longname": "src/event-emitter.js~EventEmitter",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/event-emitter.js",
    "importStyle": "EventEmitter",
    "description": "The EventEmitter class is modified from a snippet by MDN Contributers at \nhttps://developer.mozilla.org/en-US/docs/Web/API/EventTarget#_Simple_implementation_of_EventTarget \nAny copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/ \n\nThis enables custom classes to dispatch events, and is used by micro-mvc to establish observers\nand fulfill the Model-View-Controller design pattern",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 69,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/event-emitter.js~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#constructor",
    "access": "public",
    "description": "This class is intended to be extended or composed into other classes.",
    "lineNumber": 14
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "listeners",
    "memberof": "src/event-emitter.js~EventEmitter",
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#listeners",
    "access": "public",
    "description": "Listeners for each event type",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "addEventListener",
    "memberof": "src/event-emitter.js~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#addEventListener",
    "access": "public",
    "description": "Add an event listener",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The name of the event"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function to execute upon occurence of the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "removeEventListener",
    "memberof": "src/event-emitter.js~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#removeEventListener",
    "access": "public",
    "description": "Remove an even listner",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The name of the event"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The function to stop executing upon occurence of the event"
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "dispatchEvent",
    "memberof": "src/event-emitter.js~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#dispatchEvent",
    "access": "public",
    "description": "Dispatch an event. Upon dispatching an event, all listeners are called",
    "lineNumber": 57,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The `Event` that needs to be dispatched."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "returns the inverse of `event.defaultPrevented`"
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "listensFor",
    "memberof": "src/event-emitter.js~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#listensFor",
    "access": "public",
    "description": "Check whether the instance has listeners for the provided event type",
    "lineNumber": 74,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of event to check for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if there is a listener for this event type, otherwise false"
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "hasListener",
    "memberof": "src/event-emitter.js~EventEmitter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/event-emitter.js~EventEmitter#hasListener",
    "access": "public",
    "description": "Check whether the instance has a specific listener for the provided event type",
    "lineNumber": 84,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The type of event to check for"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "The specific callback to check for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "true if the callback exists for this event type, otherwise false"
    }
  },
  {
    "__docId__": 76,
    "kind": "file",
    "name": "src/index.js",
    "content": "import Model from './model';\nimport View from './view';\nimport EventEmitter from './event-emitter';\nimport ViewElement from './custom-elements/mvc-view';\n\nimport {\n    MVC_VIEW_ELEMENT\n} from './config';\n\n//define the custom element\n//WARNING: this may be deprecated in the future\nwindow.customElements.define(MVC_VIEW_ELEMENT, ViewElement);\n\nexport {\n    Model,\n    View,\n    EventEmitter\n};\n",
    "static": true,
    "longname": "/home/christopher/git/micro-mvc/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/model.js",
    "content": "import EventEmitter from './event-emitter';\n\nimport * as config from './config';\n\n/**\n * This class encapsulates a basic Object and dispatches events when they are changed\n * @extends {EventEmitter}\n */\nexport default class Model extends EventEmitter {\n    /**\n     * Create a Model which can observe and be observed by supplying a raw data object and encapsulating it\n     * @param {object} dataModel The raw data object to be encapsulated by the instance\n     */\n    constructor(dataModel) {\n        super();\n\n        /**\n         * the raw data object which is encapsulated by the event emitter\n         * @type {object}\n         */\n        this._dataModel = dataModel;\n\n        for (let k of Object.keys(this._dataModel)) {\n\n            Object.defineProperty(this, k, {\n                innumerable: true,\n                get: () => {\n                    return this._dataModel[k];\n                },\n                set: (val) => {\n                    dataModel[k] = val;\n                    let e = new CustomEvent(config.MVC_PROPERTY_CHANGED, {\n                        detail: {\n                            model: this._dataModel,\n                            property: k,\n                            value: val\n                        }\n                    });\n                    this.dispatchEvent(e);\n                }\n            });\n        }\n    }\n\n    /**\n     * return the underlying _dataModel in its current state\n     * @type {object}\n     * @deprecated Use `dataModel` instead\n     */\n    get model() {\n        return this._dataModel;\n    }\n\n    /**\n     * return the underlying _dataModel in its current state\n     * @type {object}\n     * @experimental This may be deprecated in the future to preserve the object's namespace\n     */\n    get dataModel() {\n        return this._dataModel;\n    }\n\n    /**\n     * assign multiple values to the dataModel, and dispatch an event.\n     * @param {object} val An object containing the values to be updated\n     * @experimental This may be deprecated in the future to preserve the object's namespace\n     */\n    modify(val) {\n        Object.assign(this._dataModel, val);\n        //In some situations, it may be too computationally\n        //intensive to make updates to all listeners to model,\n        //so providing a list of the properties and values that\n        //were changed and the raw val object as \"updates\" so\n        //that only the updates are necessary to process\n        let e = new CustomEvent(config.MVC_MODEL_MODIFIED, {\n            detail: {\n                updates: val,\n                model: this._dataModel,\n                properties: [Object.keys(val)],\n                values: [Object.values(val)]\n            }\n        });\n\n        this.dispatchEvent(e);\n    }\n}\n",
    "static": true,
    "longname": "/home/christopher/git/micro-mvc/src/model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "Model",
    "memberof": "src/model.js",
    "static": true,
    "longname": "src/model.js~Model",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/model.js",
    "importStyle": "Model",
    "description": "This class encapsulates a basic Object and dispatches events when they are changed",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model.js~Model#constructor",
    "access": "public",
    "description": "Create a Model which can observe and be observed by supplying a raw data object and encapsulating it",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dataModel",
        "description": "The raw data object to be encapsulated by the instance"
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "_dataModel",
    "memberof": "src/model.js~Model",
    "static": false,
    "longname": "src/model.js~Model#_dataModel",
    "access": "private",
    "description": "the raw data object which is encapsulated by the event emitter",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "get",
    "name": "model",
    "memberof": "src/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model.js~Model#model",
    "access": "public",
    "description": "return the underlying _dataModel in its current state",
    "lineNumber": 50,
    "deprecated": "Use `dataModel` instead",
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "get",
    "name": "dataModel",
    "memberof": "src/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model.js~Model#dataModel",
    "access": "public",
    "description": "return the underlying _dataModel in its current state",
    "lineNumber": 59,
    "experimental": "This may be deprecated in the future to preserve the object's namespace",
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "modify",
    "memberof": "src/model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/model.js~Model#modify",
    "access": "public",
    "description": "assign multiple values to the dataModel, and dispatch an event.",
    "lineNumber": 68,
    "experimental": "This may be deprecated in the future to preserve the object's namespace",
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "An object containing the values to be updated"
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/view.js",
    "content": "import * as config from './config';\n\nimport EventEmitter from './event-emitter';\n\n/**\n * The View class is an EventEmitter that searches the children of the provided DOM object for custom attributes\n * which direct it to observe and/or update properties of the provided model object\n * @extends {EventEmitter}\n * @todo Write detailed comments\n */\nexport default class View extends EventEmitter {\n    /**\n     * The constructor searches the DOM object and attaches events to the model and the view\n     * @param {object} viewDOM A DOM object with children that observe or control the values of the model\n     * @param {object} model A model object of type Model to be observed and updated by the View\n     */\n    constructor(viewDOM, model) {\n        super();\n\n        let observers = viewDOM.querySelectorAll(`[${config.MVC_OBSERVES}]`);\n        let controls = viewDOM.querySelectorAll(`[${config.MVC_CONTROLS}]`);\n\n        let radioGroupObservers = viewDOM.querySelectorAll(`[${config.MVC_OBSERVES}][${config.MVC_RADIO_GROUP}]`);\n        let radioGroupControls = viewDOM.querySelectorAll(`[${config.MVC_CONTROLS}][${config.MVC_RADIO_GROUP}]`);\n\n        let checkGroupObservers = viewDOM.querySelectorAll(`[${config.MVC_OBSERVES}][${config.MVC_CHECK_GROUP}]`);\n        let checkGroupControls = viewDOM.querySelectorAll(`[${config.MVC_CONTROLS}][${config.MVC_CHECK_GROUP}]`);\n\n        radioGroupObservers = Array.prototype.map.call(radioGroupObservers, (o) => o);\n        radioGroupControls = Array.prototype.map.call(radioGroupControls, (c) => c);\n\n        checkGroupObservers = Array.prototype.map.call(checkGroupObservers, (o) => o);\n        checkGroupControls = Array.prototype.map.call(checkGroupControls, (c) => c);\n\n        let fieldsetGetAdapter = new Map();\n        let fieldsetOptionsMap = new Map();\n        let selectOptionsMap = new Map();\n        let fieldsetSetAdapter = new Map();\n\n        function getInputValue(control) {\n            let inputType = control.getAttribute('type');\n\n            //most of these can just fall through to default, listing them exhaustively for thoroughness\n            switch (inputType) {\n                case 'button':\n                case 'file': //TODO: figure out if possible to handle file\n                case 'image':\n                case 'password': //you should never be allowed to control this programmatically\n                case 'reset':\n                case 'submit':\n                    throw new TypeError(`Inputs of type ${inputType} cannot observe models`);\n                case 'checkbox':\n                    return control.checked;\n                    //case 'color': case 'date': case 'datetime-local': case 'email': case 'hidden': case 'month': case 'number': case 'radio': case 'range': case 'search': case 'tel': case 'text': case 'time': case 'url': case 'week':\n                default:\n                    return control.value;\n            }\n        }\n\n        function getControlValue(control) {\n            switch (control.tagName) {\n                case 'INPUT':\n                    return getInputValue(control);\n                case 'FIELDSET':\n                    return fieldsetGetAdapter.get(control)();\n                case 'SELECT':\n                    return control.value;\n                default:\n                    return control.innerHTML;\n            }\n        }\n\n        function updateInputValue(observer, value) {\n            let inputType = observer.getAttribute('type');\n            switch (inputType) {\n                case 'button':\n                case 'file': //TODO: figure out if possible to handle file\n                case 'image':\n                case 'reset':\n                case 'submit':\n                    throw new TypeError(`Inputs of type ${inputType} do not have values`);\n                case 'password': //you should never be allowed to control this programmatically\n                    throw new TypeError(`Inputs of type ${inputType} may not be modified by controllers`);\n                case 'checkbox':\n                    observer.checked = value;\n                    break;\n                    //TODO: implement errors for cases when types like numbers and ranges have min, max, and step attributes\n                    //TODO: test dates\n                    //case 'color': case 'date': case 'datetime-local': case 'email': case 'hidden': case 'month': case 'number': case 'radio': case 'range': case 'search': case 'tel': case 'text': case 'time': case 'url': case 'week':\n                default:\n                    observer.value = value;\n                    break;\n            }\n        }\n\n        function updateObserver(observer, value) {\n            switch (observer.tagName) {\n                case 'INPUT':\n                    updateInputValue(observer, value);\n                    break;\n                case 'FIELDSET':\n                    if (observer.hasAttribute(config.MVC_RADIO_GROUP) && !fieldsetOptionsMap.get(observer).includes(value)) {\n                        throw new RangeError(`The value supplied, ${value}, is not a valid option`);\n                    } else if (observer.hasAttribute(config.MVC_CHECK_GROUP) && Object.keys(value).filter(v => !fieldsetOptionsMap.get(observer).includes(v)).length) {\n                        throw new RangeError(`At least one of the values supplied, ${value}, is not a valid option`);\n                    }\n                    fieldsetSetAdapter.get(observer)(value);\n                    break;\n                case 'SELECT':\n                    if (!selectOptionsMap.get(observer).includes(value)) {\n                        throw new RangeError(`The value supplied, ${value}, is not a valid option`);\n                    }\n                    observer.value = value;\n                    break;\n                default:\n                    observer.innerHTML = value;\n                    break;\n            }\n        }\n\n        for (let i = 0; i < controls.length; i++) {\n            let controlledValues = controls[i].getAttribute(config.MVC_CONTROLS).split(',');\n            let addEventListeners = (c) => {\n                for (let val in controlledValues) {\n                    c.addEventListener('change', (e) => {\n                        let ce = new CustomEvent(config.MVC_INPUT_CHANGED, {\n                            target: e.target,\n                            detail: {\n                                property: controlledValues[val],\n                                value: getControlValue(controls[i])\n                            }\n                        });\n                        model[controlledValues[val]] = getControlValue(controls[i]);\n                        this.dispatchEvent(ce);\n                    });\n                }\n            };\n\n            if (radioGroupControls.includes(controls[i])) {\n                let radioGroupName = controls[i].getAttribute(config.MVC_RADIO_GROUP);\n\n                let radioForm = controls[i].closest('form');\n                let nodeList = radioForm ? radioForm.elements[radioGroupName] : document.getElementsByName(radioGroupName);\n\n                fieldsetGetAdapter.set(controls[i], (radioForm ?\n                    () => nodeList.value :\n                    () => controls[i].querySelector(':checked').value\n                ));\n\n                nodeList.forEach((n) => {\n                    addEventListeners(n);\n                });\n            } else if (checkGroupControls.includes(controls[i])) {\n                let nodeList = controls[i].querySelectorAll('[type=\"checkbox\"]');\n\n                fieldsetGetAdapter.set(controls[i], () => {\n                    let result = {};\n                    nodeList.forEach((n) => {\n                        result[n.value] = n.checked;\n                    });\n                    return result;\n                });\n\n                nodeList.forEach((n) => {\n                    addEventListeners(n);\n                });\n            } else {\n                addEventListeners(controls[i]);\n            }\n        }\n\n        for (let i = 0; i < observers.length; i++) {\n            if (radioGroupObservers.includes(observers[i])) {\n                let radioGroupName = observers[i].getAttribute(config.MVC_RADIO_GROUP);\n\n                let radioForm = observers[i].closest('form');\n                let nodeList = radioForm ? radioForm.elements[radioGroupName] : document.getElementsByName(radioGroupName);\n                fieldsetSetAdapter.set(observers[i], (radioForm ?\n                    (val) => nodeList.value = val :\n                    (val) => nodeList.forEach((n) => {\n                        n.checked = false;\n                        if (n.value === val) {\n                            n.checked = true;\n                        }\n                    })));\n                let options = [];\n                nodeList.forEach((o) => {\n                    options.push(o.value);\n                });\n                fieldsetOptionsMap.set(observers[i], options);\n            } else if (checkGroupObservers.includes(observers[i])) {\n                let nodeList = observers[i].querySelectorAll('[type=\"checkbox\"]');\n                fieldsetSetAdapter.set(observers[i], (val) => {\n                    nodeList.forEach((n) => {\n                        n.checked = val[n.value];\n                    });\n                });\n                let options = [];\n                nodeList.forEach((o) => {\n                    options.push(o.value);\n                });\n                fieldsetOptionsMap.set(observers[i], options);\n            } else if (observers[i].tagName === 'SELECT') {\n                let options = [];\n                observers[i].querySelectorAll('option').forEach((o) => {\n                    options.push(o.value);\n                });\n                selectOptionsMap.set(observers[i], options);\n            }\n\n            let observedValues = observers[i].getAttribute(config.MVC_OBSERVES).split(',');\n            for (let val in observedValues) {\n                model.addEventListener(config.MVC_PROPERTY_CHANGED, (e) => {\n                    if (observedValues[val] === e.detail.property && e.target !== observers[i]) {\n                        updateObserver(observers[i], e.detail.value);\n                    }\n                });\n            }\n        }\n\n        model.addEventListener(config.MVC_MODEL_MODIFIED, (e) => {\n            for (let i = 0; i < observers.length; i++) {\n                let observedValues = observers[i].getAttribute(config.MVC_OBSERVES).split(',');\n                for (let val in observedValues) {\n                    let updatedVal = e.detail.updates[observedValues[val]];\n                    if (updatedVal) {\n                        updateObserver(observers[i], updatedVal);\n                    }\n                }\n            }\n        });\n\n        //Assume that view DOM object is empty, and trigger a model update to ensure data is injected properly\n        model.modify(model.dataModel);\n    }\n}\n",
    "static": true,
    "longname": "/home/christopher/git/micro-mvc/src/view.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "View",
    "memberof": "src/view.js",
    "static": true,
    "longname": "src/view.js~View",
    "access": "public",
    "export": true,
    "importPath": "micro-mvc/src/view.js",
    "importStyle": "View",
    "description": "The View class is an EventEmitter that searches the children of the provided DOM object for custom attributes\nwhich direct it to observe and/or update properties of the provided model object",
    "lineNumber": 11,
    "todo": [
      "Write detailed comments"
    ],
    "interface": false,
    "extends": [
      "EventEmitter"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/view.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/view.js~View#constructor",
    "access": "public",
    "description": "The constructor searches the DOM object and attaches events to the model and the view",
    "lineNumber": 17,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "viewDOM",
        "description": "A DOM object with children that observe or control the values of the model"
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "A model object of type Model to be observed and updated by the View"
      }
    ]
  },
  {
    "kind": "index",
    "content": "# micro-mvc\n\nThis package exposes two very basic classes that can be used create reactive MVC interfaces. \n\nModels are created from basic objects. Simply create an object with the desired properties, and instantiate the Model class with the object as the argument in the constructor: \n\nJavaScript \n```\nlet Model = mvc.Model;\n\nlet application = {\n    name: 'My Application',\n    version: '1.0.0'\n};\n\nlet applicationModel = new Model(application);\n``` \n\nThe `applicationModel` above will encapsulate the raw object and provide getters and setters for its properites. Setters for the properties will trigger events for which a View listens. \n\nViews are established from a DOM object and existing models. It is assumed that the DOM is left unfilled, and upon construction, the View with force the model to emit an event that fills in all the data: \n\nHTML \n```\n<div class=\"application-container\">\n    <p><span mvc-observes=\"name\"></span> <span mvc-observes=\"version\"></span></p>\n</div>\n``` \n\nJavaScript \n```\nlet View = mvc.View;\n\nlet applicationContainer = document.querySelector('.application-container');\nlet applicationView = new View(applicationContainer, applicationModel);\n``` \n\n[View the demo here](https://christophergorexyz.github.io/micro-mvc/demo/)\n\n",
    "longname": "/home/christopher/git/micro-mvc/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"micro-mvc\",\n    \"version\": \"1.3.2\",\n    \"description\": \"A minimal MVC tool\",\n    \"main\": \"lib/index.js\",\n    \"dependencies\": {},\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.7.7\",\n        \"@babel/core\": \"^7.7.7\",\n        \"@babel/plugin-transform-runtime\": \"^7.7.6\",\n        \"@babel/preset-env\": \"^7.7.7\",\n        \"@babel/runtime\": \"^7.7.7\",\n        \"babelify\": \"^10.0.0\",\n        \"browserify\": \"^16.5.0\",\n        \"esdoc\": \"^1.1.0\",\n        \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n        \"esdoc-standard-plugin\": \"^1.0.0\",\n        \"mocha\": \"^6.2.2\",\n        \"uglify-js\": \"^3.7.2\"\n    },\n    \"scripts\": {\n        \"test\": \"mocha\",\n        \"build\": \"esdoc && babel src/ --out-dir lib/ -s && browserify src/index.js -d -s mvc -t [ babelify ] | uglifyjs > dist/micro-mvc.min.js\"\n    },\n    \"repository\": {\n        \"type\": \"git\",\n        \"url\": \"git@github.com:christophergorexyz/micro-mvc.git\"\n    },\n    \"babel\": {\n        \"presets\": [\n            \"@babel/env\"\n        ],\n        \"plugins\": [\n            \"module:@babel/plugin-transform-runtime\"\n        ]\n    },\n    \"esdoc\": {\n        \"source\": \"./src\",\n        \"destination\": \"./docs\",\n        \"plugins\": [\n            {\n                \"name\": \"esdoc-ecmascript-proposal-plugin\",\n                \"option\": {\n                    \"all\": true\n                }\n            },\n            {\n                \"name\": \"esdoc-standard-plugin\",\n                \"option\": {\n                    \"all\": true\n                }\n            }\n        ]\n    },\n    \"author\": \"Christopher J Gore\",\n    \"license\": \"MIT\",\n    \"homepage\": \"https://christophergorexyz.github.io/micro-mvc\"\n}\n",
    "longname": "/home/christopher/git/micro-mvc/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]