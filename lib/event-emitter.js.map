{"version":3,"sources":["../src/event-emitter.js"],"names":["EventEmitter","listeners","type","callback","push","stack","i","l","length","splice","event","slice","call","defaultPrevented","indexOf"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;IASqBA,Y;;;AACjB;;;AAGA,0BAAc;AAAA;;AACV;;;;AAIA,SAAKC,SAAL,GAAiB,EAAjB;AACH;AAED;;;;;;;;;qCAKiBC,I,EAAMC,Q,EAAU;AAC7B,UAAI,EAAED,IAAI,IAAI,KAAKD,SAAf,CAAJ,EAA+B;AAC3B,aAAKA,SAAL,CAAeC,IAAf,IAAuB,EAAvB;AACH;;AACD,WAAKD,SAAL,CAAeC,IAAf,EAAqBE,IAArB,CAA0BD,QAA1B;AACH;AAED;;;;;;;;wCAKoBD,I,EAAMC,Q,EAAU;AAChC,UAAI,EAAED,IAAI,IAAI,KAAKD,SAAf,CAAJ,EAA+B;AAC3B;AACH;;AACD,UAAII,KAAK,GAAG,KAAKJ,SAAL,CAAeC,IAAf,CAAZ;;AACA,WAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,YAAID,KAAK,CAACC,CAAD,CAAL,KAAaH,QAAjB,EAA2B;AACvBE,UAAAA,KAAK,CAACI,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACA;AACH;AACJ;AACJ;AAED;;;;;;;;kCAKcI,K,EAAO;AACjB,UAAI,EAAEA,KAAK,CAACR,IAAN,IAAc,KAAKD,SAArB,CAAJ,EAAqC;AACjC,eAAO,IAAP;AACH;;AACD,UAAII,KAAK,GAAG,KAAKJ,SAAL,CAAeS,KAAK,CAACR,IAArB,EAA2BS,KAA3B,EAAZ;;AAEA,WAAK,IAAIL,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CD,QAAAA,KAAK,CAACC,CAAD,CAAL,CAASM,IAAT,CAAc,IAAd,EAAoBF,KAApB;AACH;;AACD,aAAO,CAACA,KAAK,CAACG,gBAAd;AACH;AAED;;;;;;;;+BAKWX,I,EAAM;AACb,aAAO,CAAC,CAAC,KAAKD,SAAL,CAAeC,IAAf,CAAT;AACH;AAED;;;;;;;;;gCAMYA,I,EAAMC,Q,EAAU;AACxB,aAAO,CAAC,CAAC,KAAKF,SAAL,CAAeC,IAAf,CAAF,GAAyB,KAAKD,SAAL,CAAeC,IAAf,EAAqBY,OAArB,CAA6BX,QAA7B,KAA0C,CAAnE,GAAuE,KAA9E;AACH","sourcesContent":["/**\n * The EventEmitter class is modified from a snippet by MDN Contributers at \n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#_Simple_implementation_of_EventTarget \n * Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/ \n *\n * This enables custom classes to dispatch events, and is used by micro-mvc to establish observers\n * and fulfill the Model-View-Controller design pattern\n */\n\nexport default class EventEmitter {\n    /**\n     * This class is intended to be extended or composed into other classes.\n     */\n    constructor() {\n        /**\n         * Listeners for each event type\n         * @type {object}\n         */\n        this.listeners = {};\n    }\n\n    /**\n     * Add an event listener\n     * @param {string} type The name of the event\n     * @param {function} callback The function to execute upon occurence of the event\n     */\n    addEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n            this.listeners[type] = [];\n        }\n        this.listeners[type].push(callback);\n    }\n\n    /**\n     * Remove an even listner\n     * @param {string} type The name of the event\n     * @param {function} callback The function to stop executing upon occurence of the event\n     */\n    removeEventListener(type, callback) {\n        if (!(type in this.listeners)) {\n            return;\n        }\n        var stack = this.listeners[type];\n        for (var i = 0, l = stack.length; i < l; i++) {\n            if (stack[i] === callback) {\n                stack.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Dispatch an event. Upon dispatching an event, all listeners are called\n     * @param {object} event The `Event` that needs to be dispatched.\n     * @return {boolean} returns the inverse of `event.defaultPrevented`\n     */\n    dispatchEvent(event) {\n        if (!(event.type in this.listeners)) {\n            return true;\n        }\n        var stack = this.listeners[event.type].slice();\n\n        for (var i = 0, l = stack.length; i < l; i++) {\n            stack[i].call(this, event);\n        }\n        return !event.defaultPrevented;\n    }\n\n    /**\n     * Check whether the instance has listeners for the provided event type\n     * @return {boolean} true if there is a listener for this event type, otherwise false\n     * @param {string} type The type of event to check for\n     */\n    listensFor(type) {\n        return !!this.listeners[type];\n    }\n\n    /**\n     * Check whether the instance has a specific listener for the provided event type\n     * @return {boolean} true if the callback exists for this event type, otherwise false\n     * @param {string} type The type of event to check for\n     * @param {function} callback The specific callback to check for\n     */\n    hasListener(type, callback) {\n        return !!this.listeners[type] ? this.listeners[type].indexOf(callback) >= 0 : false;\n    }\n}\n"],"file":"event-emitter.js"}