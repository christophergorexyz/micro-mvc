{"version":3,"sources":["../src/event-emitter.js"],"names":["EventEmitter","listeners","type","callback","push","stack","i","l","length","splice","event","slice","call","defaultPrevented","indexOf"],"mappings":";;;;;;;;;;;;;AAAA;;;;;;;;IASqBA,Y;;;AACjB;;;AAGA,0BAAc;AAAA;;AACV;;;;AAIA,SAAKC,SAAL,GAAiB,EAAjB;AACH;AAED;;;;;;;;;qCAKiBC,I,EAAMC,Q,EAAU;AAC7B,UAAI,EAAED,IAAI,IAAI,KAAKD,SAAf,CAAJ,EAA+B;AAC3B,aAAKA,SAAL,CAAeC,IAAf,IAAuB,EAAvB;AACH;;AACD,WAAKD,SAAL,CAAeC,IAAf,EAAqBE,IAArB,CAA0BD,QAA1B;AACH;AAED;;;;;;;;wCAKoBD,I,EAAMC,Q,EAAU;AAChC,UAAI,EAAED,IAAI,IAAI,KAAKD,SAAf,CAAJ,EAA+B;AAC3B;AACH;;AACD,UAAII,KAAK,GAAG,KAAKJ,SAAL,CAAeC,IAAf,CAAZ;;AACA,WAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1C,YAAID,KAAK,CAACC,CAAD,CAAL,KAAaH,QAAjB,EAA2B;AACvBE,UAAAA,KAAK,CAACI,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACA;AACH;AACJ;AACJ;AAED;;;;;;;;kCAKcI,K,EAAO;AACjB,UAAI,EAAEA,KAAK,CAACR,IAAN,IAAc,KAAKD,SAArB,CAAJ,EAAqC;AACjC,eAAO,IAAP;AACH;;AACD,UAAII,KAAK,GAAG,KAAKJ,SAAL,CAAeS,KAAK,CAACR,IAArB,EAA2BS,KAA3B,EAAZ;;AAEA,WAAK,IAAIL,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCF,CAAC,GAAGC,CAAtC,EAAyCD,CAAC,EAA1C,EAA8C;AAC1CD,QAAAA,KAAK,CAACC,CAAD,CAAL,CAASM,IAAT,CAAc,IAAd,EAAoBF,KAApB;AACH;;AACD,aAAO,CAACA,KAAK,CAACG,gBAAd;AACH;AAED;;;;;;;;+BAKWX,I,EAAM;AACb,aAAO,CAAC,CAAC,KAAKD,SAAL,CAAeC,IAAf,CAAT;AACH;AAED;;;;;;;;;gCAMYA,I,EAAMC,Q,EAAU;AACxB,aAAO,CAAC,CAAC,KAAKF,SAAL,CAAeC,IAAf,CAAF,GAAyB,KAAKD,SAAL,CAAeC,IAAf,EAAqBY,OAArB,CAA6BX,QAA7B,KAA0C,CAAnE,GAAuE,KAA9E;AACH","sourcesContent":["/**\r\n * The EventEmitter class is modified from a snippet by MDN Contributers at \r\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget#_Simple_implementation_of_EventTarget \r\n * Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/ \r\n *\r\n * This enables custom classes to dispatch events, and is used by micro-mvc to establish observers\r\n * and fulfill the Model-View-Controller design pattern\r\n */\r\n\r\nexport default class EventEmitter {\r\n    /**\r\n     * This class is intended to be extended or composed into other classes.\r\n     */\r\n    constructor() {\r\n        /**\r\n         * Listeners for each event type\r\n         * @type {object}\r\n         */\r\n        this.listeners = {};\r\n    }\r\n\r\n    /**\r\n     * Add an event listener\r\n     * @param {string} type The name of the event\r\n     * @param {function} callback The function to execute upon occurence of the event\r\n     */\r\n    addEventListener(type, callback) {\r\n        if (!(type in this.listeners)) {\r\n            this.listeners[type] = [];\r\n        }\r\n        this.listeners[type].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Remove an even listner\r\n     * @param {string} type The name of the event\r\n     * @param {function} callback The function to stop executing upon occurence of the event\r\n     */\r\n    removeEventListener(type, callback) {\r\n        if (!(type in this.listeners)) {\r\n            return;\r\n        }\r\n        var stack = this.listeners[type];\r\n        for (var i = 0, l = stack.length; i < l; i++) {\r\n            if (stack[i] === callback) {\r\n                stack.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Dispatch an event. Upon dispatching an event, all listeners are called\r\n     * @param {object} event The `Event` that needs to be dispatched.\r\n     * @return {boolean} returns the inverse of `event.defaultPrevented`\r\n     */\r\n    dispatchEvent(event) {\r\n        if (!(event.type in this.listeners)) {\r\n            return true;\r\n        }\r\n        var stack = this.listeners[event.type].slice();\r\n\r\n        for (var i = 0, l = stack.length; i < l; i++) {\r\n            stack[i].call(this, event);\r\n        }\r\n        return !event.defaultPrevented;\r\n    }\r\n\r\n    /**\r\n     * Check whether the instance has listeners for the provided event type\r\n     * @return {boolean} true if there is a listener for this event type, otherwise false\r\n     * @param {string} type The type of event to check for\r\n     */\r\n    listensFor(type) {\r\n        return !!this.listeners[type];\r\n    }\r\n\r\n    /**\r\n     * Check whether the instance has a specific listener for the provided event type\r\n     * @return {boolean} true if the callback exists for this event type, otherwise false\r\n     * @param {string} type The type of event to check for\r\n     * @param {function} callback The specific callback to check for\r\n     */\r\n    hasListener(type, callback) {\r\n        return !!this.listeners[type] ? this.listeners[type].indexOf(callback) >= 0 : false;\r\n    }\r\n}\r\n"],"file":"event-emitter.js"}