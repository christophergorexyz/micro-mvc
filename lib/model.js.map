{"version":3,"sources":["../src/model.js"],"names":["Model","dataModel","_dataModel","k","Object","defineProperty","innumerable","get","set","val","e","CustomEvent","config","MVC_PROPERTY_CHANGED","detail","model","property","value","dispatchEvent","keys","assign","MVC_MODEL_MODIFIED","updates","properties","values","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;;;IAIqBA,K;;;;;AACjB;;;;AAIA,iBAAYC,SAAZ,EAAuB;AAAA;;AAAA;AACnB;AAEA;;;;;AAIA,UAAKC,UAAL,GAAkBD,SAAlB;;AAPmB;AASd,UAAIE,CAAC,mBAAL;AAEDC,MAAAA,MAAM,CAACC,cAAP,iDAA4BF,CAA5B,EAA+B;AAC3BG,QAAAA,WAAW,EAAE,IADc;AAE3BC,QAAAA,GAAG,EAAE,eAAM;AACP,iBAAO,MAAKL,UAAL,CAAgBC,CAAhB,CAAP;AACH,SAJ0B;AAK3BK,QAAAA,GAAG,EAAE,aAACC,GAAD,EAAS;AACVR,UAAAA,SAAS,CAACE,CAAD,CAAT,GAAeM,GAAf;AACA,cAAIC,CAAC,GAAG,IAAIC,WAAJ,CAAgBC,MAAM,CAACC,oBAAvB,EAA6C;AACjDC,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAE,MAAKb,UADR;AAEJc,cAAAA,QAAQ,EAAEb,CAFN;AAGJc,cAAAA,KAAK,EAAER;AAHH;AADyC,WAA7C,CAAR;;AAOA,gBAAKS,aAAL,CAAmBR,CAAnB;AACH;AAf0B,OAA/B;AAXe;;AASnB,oCAAcN,MAAM,CAACe,IAAP,CAAY,MAAKjB,UAAjB,CAAd,kCAA4C;AAAA;AAmB3C;;AA5BkB;AA6BtB;AAED;;;;;;;;;;AAkBA;;;;;2BAKOO,G,EAAK;AACRL,MAAAA,MAAM,CAACgB,MAAP,CAAc,KAAKlB,UAAnB,EAA+BO,GAA/B,EADQ,CAER;AACA;AACA;AACA;AACA;;AACA,UAAIC,CAAC,GAAG,IAAIC,WAAJ,CAAgBC,MAAM,CAACS,kBAAvB,EAA2C;AAC/CP,QAAAA,MAAM,EAAE;AACJQ,UAAAA,OAAO,EAAEb,GADL;AAEJM,UAAAA,KAAK,EAAE,KAAKb,UAFR;AAGJqB,UAAAA,UAAU,EAAE,CAACnB,MAAM,CAACe,IAAP,CAAYV,GAAZ,CAAD,CAHR;AAIJe,UAAAA,MAAM,EAAE,CAACpB,MAAM,CAACoB,MAAP,CAAcf,GAAd,CAAD;AAJJ;AADuC,OAA3C,CAAR;AASA,WAAKS,aAAL,CAAmBR,CAAnB;AACH;;;wBAnCW;AACR,aAAO,KAAKR,UAAZ;AACH;AAED;;;;;;;;wBAKgB;AACZ,aAAO,KAAKA,UAAZ;AACH;;;EApD8BuB,wB","sourcesContent":["import EventEmitter from './event-emitter';\n\nimport * as config from './config';\n\n/**\n * This class encapsulates a basic Object and dispatches events when they are changed\n * @extends {EventEmitter}\n */\nexport default class Model extends EventEmitter {\n    /**\n     * Create a Model which can observe and be observed by supplying a raw data object and encapsulating it\n     * @param {object} dataModel The raw data object to be encapsulated by the instance\n     */\n    constructor(dataModel) {\n        super();\n\n        /**\n         * the raw data object which is encapsulated by the event emitter\n         * @type {object}\n         */\n        this._dataModel = dataModel;\n\n        for (let k of Object.keys(this._dataModel)) {\n\n            Object.defineProperty(this, k, {\n                innumerable: true,\n                get: () => {\n                    return this._dataModel[k];\n                },\n                set: (val) => {\n                    dataModel[k] = val;\n                    let e = new CustomEvent(config.MVC_PROPERTY_CHANGED, {\n                        detail: {\n                            model: this._dataModel,\n                            property: k,\n                            value: val\n                        }\n                    });\n                    this.dispatchEvent(e);\n                }\n            });\n        }\n    }\n\n    /**\n     * return the underlying _dataModel in its current state\n     * @type {object}\n     * @deprecated Use `dataModel` instead\n     */\n    get model() {\n        return this._dataModel;\n    }\n\n    /**\n     * return the underlying _dataModel in its current state\n     * @type {object}\n     * @experimental This may be deprecated in the future to preserve the object's namespace\n     */\n    get dataModel() {\n        return this._dataModel;\n    }\n\n    /**\n     * assign multiple values to the dataModel, and dispatch an event.\n     * @param {object} val An object containing the values to be updated\n     * @experimental This may be deprecated in the future to preserve the object's namespace\n     */\n    modify(val) {\n        Object.assign(this._dataModel, val);\n        //In some situations, it may be too computationally\n        //intensive to make updates to all listeners to model,\n        //so providing a list of the properties and values that\n        //were changed and the raw val object as \"updates\" so\n        //that only the updates are necessary to process\n        let e = new CustomEvent(config.MVC_MODEL_MODIFIED, {\n            detail: {\n                updates: val,\n                model: this._dataModel,\n                properties: [Object.keys(val)],\n                values: [Object.values(val)]\n            }\n        });\n\n        this.dispatchEvent(e);\n    }\n}\n"],"file":"model.js"}