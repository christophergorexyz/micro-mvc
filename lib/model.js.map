{"version":3,"sources":["../src/model.js"],"names":["Model","dataModel","_dataModel","k","Object","defineProperty","innumerable","get","set","val","e","CustomEvent","config","MVC_PROPERTY_CHANGED","detail","model","property","value","dispatchEvent","keys","assign","MVC_MODEL_MODIFIED","updates","properties","values","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;;;IAIqBA,K;;;;;AACjB;;;;AAIA,iBAAYC,SAAZ,EAAuB;AAAA;;AAAA;AACnB;AAEA;;;;;AAIA,UAAKC,UAAL,GAAkBD,SAAlB;;AAPmB;AASd,UAAIE,CAAC,mBAAL;AAEDC,MAAAA,MAAM,CAACC,cAAP,iDAA4BF,CAA5B,EAA+B;AAC3BG,QAAAA,WAAW,EAAE,IADc;AAE3BC,QAAAA,GAAG,EAAE,eAAM;AACP,iBAAO,MAAKL,UAAL,CAAgBC,CAAhB,CAAP;AACH,SAJ0B;AAK3BK,QAAAA,GAAG,EAAE,aAACC,GAAD,EAAS;AACVR,UAAAA,SAAS,CAACE,CAAD,CAAT,GAAeM,GAAf;AACA,cAAIC,CAAC,GAAG,IAAIC,WAAJ,CAAgBC,MAAM,CAACC,oBAAvB,EAA6C;AACjDC,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAE,MAAKb,UADR;AAEJc,cAAAA,QAAQ,EAAEb,CAFN;AAGJc,cAAAA,KAAK,EAAER;AAHH;AADyC,WAA7C,CAAR;;AAOA,gBAAKS,aAAL,CAAmBR,CAAnB;AACH;AAf0B,OAA/B;AAXe;;AASnB,oCAAcN,MAAM,CAACe,IAAP,CAAY,MAAKjB,UAAjB,CAAd,kCAA4C;AAAA;AAmB3C;;AA5BkB;AA6BtB;AAED;;;;;;;;;;AAkBA;;;;;2BAKOO,G,EAAK;AACRL,MAAAA,MAAM,CAACgB,MAAP,CAAc,KAAKlB,UAAnB,EAA+BO,GAA/B,EADQ,CAER;AACA;AACA;AACA;AACA;;AACA,UAAIC,CAAC,GAAG,IAAIC,WAAJ,CAAgBC,MAAM,CAACS,kBAAvB,EAA2C;AAC/CP,QAAAA,MAAM,EAAE;AACJQ,UAAAA,OAAO,EAAEb,GADL;AAEJM,UAAAA,KAAK,EAAE,KAAKb,UAFR;AAGJqB,UAAAA,UAAU,EAAE,CAACnB,MAAM,CAACe,IAAP,CAAYV,GAAZ,CAAD,CAHR;AAIJe,UAAAA,MAAM,EAAE,CAACpB,MAAM,CAACoB,MAAP,CAAcf,GAAd,CAAD;AAJJ;AADuC,OAA3C,CAAR;AASA,WAAKS,aAAL,CAAmBR,CAAnB;AACH;;;wBAnCW;AACR,aAAO,KAAKR,UAAZ;AACH;AAED;;;;;;;;wBAKgB;AACZ,aAAO,KAAKA,UAAZ;AACH;;;EApD8BuB,wB","sourcesContent":["import EventEmitter from './event-emitter';\r\n\r\nimport * as config from './config';\r\n\r\n/**\r\n * This class encapsulates a basic Object and dispatches events when they are changed\r\n * @extends {EventEmitter}\r\n */\r\nexport default class Model extends EventEmitter {\r\n    /**\r\n     * Create a Model which can observe and be observed by supplying a raw data object and encapsulating it\r\n     * @param {object} dataModel The raw data object to be encapsulated by the instance\r\n     */\r\n    constructor(dataModel) {\r\n        super();\r\n\r\n        /**\r\n         * the raw data object which is encapsulated by the event emitter\r\n         * @type {object}\r\n         */\r\n        this._dataModel = dataModel;\r\n\r\n        for (let k of Object.keys(this._dataModel)) {\r\n\r\n            Object.defineProperty(this, k, {\r\n                innumerable: true,\r\n                get: () => {\r\n                    return this._dataModel[k];\r\n                },\r\n                set: (val) => {\r\n                    dataModel[k] = val;\r\n                    let e = new CustomEvent(config.MVC_PROPERTY_CHANGED, {\r\n                        detail: {\r\n                            model: this._dataModel,\r\n                            property: k,\r\n                            value: val\r\n                        }\r\n                    });\r\n                    this.dispatchEvent(e);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * return the underlying _dataModel in its current state\r\n     * @type {object}\r\n     * @deprecated Use `dataModel` instead\r\n     */\r\n    get model() {\r\n        return this._dataModel;\r\n    }\r\n\r\n    /**\r\n     * return the underlying _dataModel in its current state\r\n     * @type {object}\r\n     * @experimental This may be deprecated in the future to preserve the object's namespace\r\n     */\r\n    get dataModel() {\r\n        return this._dataModel;\r\n    }\r\n\r\n    /**\r\n     * assign multiple values to the dataModel, and dispatch an event.\r\n     * @param {object} val An object containing the values to be updated\r\n     * @experimental This may be deprecated in the future to preserve the object's namespace\r\n     */\r\n    modify(val) {\r\n        Object.assign(this._dataModel, val);\r\n        //In some situations, it may be too computationally\r\n        //intensive to make updates to all listeners to model,\r\n        //so providing a list of the properties and values that\r\n        //were changed and the raw val object as \"updates\" so\r\n        //that only the updates are necessary to process\r\n        let e = new CustomEvent(config.MVC_MODEL_MODIFIED, {\r\n            detail: {\r\n                updates: val,\r\n                model: this._dataModel,\r\n                properties: [Object.keys(val)],\r\n                values: [Object.values(val)]\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent(e);\r\n    }\r\n}\r\n"],"file":"model.js"}