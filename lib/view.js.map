{"version":3,"sources":["../src/view.js"],"names":["View","viewDOM","model","observers","querySelectorAll","config","MVC_OBSERVES","controls","MVC_CONTROLS","radioGroupObservers","MVC_RADIO_GROUP","radioGroupControls","checkGroupObservers","MVC_CHECK_GROUP","checkGroupControls","Array","prototype","map","call","o","c","fieldsetGetAdapter","Map","fieldsetOptionsMap","selectOptionsMap","fieldsetSetAdapter","getInputValue","control","inputType","getAttribute","TypeError","checked","value","getControlValue","tagName","get","innerHTML","updateInputValue","observer","updateObserver","hasAttribute","includes","RangeError","Object","keys","filter","v","length","i","controlledValues","split","addEventListeners","val","addEventListener","e","ce","CustomEvent","MVC_INPUT_CHANGED","target","detail","property","dispatchEvent","radioGroupName","radioForm","closest","nodeList","elements","document","getElementsByName","set","querySelector","forEach","n","result","options","push","observedValues","MVC_PROPERTY_CHANGED","MVC_MODEL_MODIFIED","updatedVal","updates","modify","dataModel","EventEmitter"],"mappings":"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","sourcesContent":["import * as config from './config';\r\n\r\nimport EventEmitter from './event-emitter';\r\n\r\n/**\r\n * The View class is an EventEmitter that searches the children of the provided DOM object for custom attributes\r\n * which direct it to observe and/or update properties of the provided model object\r\n * @extends {EventEmitter}\r\n * @todo Write detailed comments\r\n */\r\nexport default class View extends EventEmitter {\r\n    /**\r\n     * The constructor searches the DOM object and attaches events to the model and the view\r\n     * @param {object} viewDOM A DOM object with children that observe or control the values of the model\r\n     * @param {object} model A model object of type Model to be observed and updated by the View\r\n     */\r\n    constructor(viewDOM, model) {\r\n        super();\r\n\r\n        let observers = viewDOM.querySelectorAll(`[${config.MVC_OBSERVES}]`);\r\n        let controls = viewDOM.querySelectorAll(`[${config.MVC_CONTROLS}]`);\r\n\r\n        let radioGroupObservers = viewDOM.querySelectorAll(`[${config.MVC_OBSERVES}][${config.MVC_RADIO_GROUP}]`);\r\n        let radioGroupControls = viewDOM.querySelectorAll(`[${config.MVC_CONTROLS}][${config.MVC_RADIO_GROUP}]`);\r\n\r\n        let checkGroupObservers = viewDOM.querySelectorAll(`[${config.MVC_OBSERVES}][${config.MVC_CHECK_GROUP}]`);\r\n        let checkGroupControls = viewDOM.querySelectorAll(`[${config.MVC_CONTROLS}][${config.MVC_CHECK_GROUP}]`);\r\n\r\n        radioGroupObservers = Array.prototype.map.call(radioGroupObservers, (o) => o);\r\n        radioGroupControls = Array.prototype.map.call(radioGroupControls, (c) => c);\r\n\r\n        checkGroupObservers = Array.prototype.map.call(checkGroupObservers, (o) => o);\r\n        checkGroupControls = Array.prototype.map.call(checkGroupControls, (c) => c);\r\n\r\n        let fieldsetGetAdapter = new Map();\r\n        let fieldsetOptionsMap = new Map();\r\n        let selectOptionsMap = new Map();\r\n        let fieldsetSetAdapter = new Map();\r\n\r\n        function getInputValue(control) {\r\n            let inputType = control.getAttribute('type');\r\n\r\n            //most of these can just fall through to default, listing them exhaustively for thoroughness\r\n            switch (inputType) {\r\n                case 'button':\r\n                case 'file': //TODO: figure out if possible to handle file\r\n                case 'image':\r\n                case 'password': //you should never be allowed to control this programmatically\r\n                case 'reset':\r\n                case 'submit':\r\n                    throw new TypeError(`Inputs of type ${inputType} cannot observe models`);\r\n                case 'checkbox':\r\n                    return control.checked;\r\n                    //case 'color': case 'date': case 'datetime-local': case 'email': case 'hidden': case 'month': case 'number': case 'radio': case 'range': case 'search': case 'tel': case 'text': case 'time': case 'url': case 'week':\r\n                default:\r\n                    return control.value;\r\n            }\r\n        }\r\n\r\n        function getControlValue(control) {\r\n            switch (control.tagName) {\r\n                case 'INPUT':\r\n                    return getInputValue(control);\r\n                case 'FIELDSET':\r\n                    return fieldsetGetAdapter.get(control)();\r\n                case 'SELECT':\r\n                    return control.value;\r\n                default:\r\n                    return control.innerHTML;\r\n            }\r\n        }\r\n\r\n        function updateInputValue(observer, value) {\r\n            let inputType = observer.getAttribute('type');\r\n            switch (inputType) {\r\n                case 'button':\r\n                case 'file': //TODO: figure out if possible to handle file\r\n                case 'image':\r\n                case 'reset':\r\n                case 'submit':\r\n                    throw new TypeError(`Inputs of type ${inputType} do not have values`);\r\n                case 'password': //you should never be allowed to control this programmatically\r\n                    throw new TypeError(`Inputs of type ${inputType} may not be modified by controllers`);\r\n                case 'checkbox':\r\n                    observer.checked = value;\r\n                    break;\r\n                    //TODO: implement errors for cases when types like numbers and ranges have min, max, and step attributes\r\n                    //TODO: test dates\r\n                    //case 'color': case 'date': case 'datetime-local': case 'email': case 'hidden': case 'month': case 'number': case 'radio': case 'range': case 'search': case 'tel': case 'text': case 'time': case 'url': case 'week':\r\n                default:\r\n                    observer.value = value;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        function updateObserver(observer, value) {\r\n            switch (observer.tagName) {\r\n                case 'INPUT':\r\n                    updateInputValue(observer, value);\r\n                    break;\r\n                case 'FIELDSET':\r\n                    if (observer.hasAttribute(config.MVC_RADIO_GROUP) && !fieldsetOptionsMap.get(observer).includes(value)) {\r\n                        throw new RangeError(`The value supplied, ${value}, is not a valid option`);\r\n                    } else if (observer.hasAttribute(config.MVC_CHECK_GROUP) && Object.keys(value).filter(v => !fieldsetOptionsMap.get(observer).includes(v)).length) {\r\n                        throw new RangeError(`At least one of the values supplied, ${value}, is not a valid option`);\r\n                    }\r\n                    fieldsetSetAdapter.get(observer)(value);\r\n                    break;\r\n                case 'SELECT':\r\n                    if (!selectOptionsMap.get(observer).includes(value)) {\r\n                        throw new RangeError(`The value supplied, ${value}, is not a valid option`);\r\n                    }\r\n                    observer.value = value;\r\n                    break;\r\n                default:\r\n                    observer.innerHTML = value;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < controls.length; i++) {\r\n            let controlledValues = controls[i].getAttribute(config.MVC_CONTROLS).split(',');\r\n            let addEventListeners = (c) => {\r\n                for (let val in controlledValues) {\r\n                    c.addEventListener('change', (e) => {\r\n                        let ce = new CustomEvent(config.MVC_INPUT_CHANGED, {\r\n                            target: e.target,\r\n                            detail: {\r\n                                property: controlledValues[val],\r\n                                value: getControlValue(controls[i])\r\n                            }\r\n                        });\r\n                        model[controlledValues[val]] = getControlValue(controls[i]);\r\n                        this.dispatchEvent(ce);\r\n                    });\r\n                }\r\n            };\r\n\r\n            if (radioGroupControls.includes(controls[i])) {\r\n                let radioGroupName = controls[i].getAttribute(config.MVC_RADIO_GROUP);\r\n\r\n                let radioForm = controls[i].closest('form');\r\n                let nodeList = radioForm ? radioForm.elements[radioGroupName] : document.getElementsByName(radioGroupName);\r\n\r\n                fieldsetGetAdapter.set(controls[i], (radioForm ?\r\n                    () => nodeList.value :\r\n                    () => controls[i].querySelector(':checked').value\r\n                ));\r\n\r\n                nodeList.forEach((n) => {\r\n                    addEventListeners(n);\r\n                });\r\n            } else if (checkGroupControls.includes(controls[i])) {\r\n                let nodeList = controls[i].querySelectorAll('[type=\"checkbox\"]');\r\n\r\n                fieldsetGetAdapter.set(controls[i], () => {\r\n                    let result = {};\r\n                    nodeList.forEach((n) => {\r\n                        result[n.value] = n.checked;\r\n                    });\r\n                    return result;\r\n                });\r\n\r\n                nodeList.forEach((n) => {\r\n                    addEventListeners(n);\r\n                });\r\n            } else {\r\n                addEventListeners(controls[i]);\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < observers.length; i++) {\r\n            if (radioGroupObservers.includes(observers[i])) {\r\n                let radioGroupName = observers[i].getAttribute(config.MVC_RADIO_GROUP);\r\n\r\n                let radioForm = observers[i].closest('form');\r\n                let nodeList = radioForm ? radioForm.elements[radioGroupName] : document.getElementsByName(radioGroupName);\r\n                fieldsetSetAdapter.set(observers[i], (radioForm ?\r\n                    (val) => nodeList.value = val :\r\n                    (val) => nodeList.forEach((n) => {\r\n                        n.checked = false;\r\n                        if (n.value === val) {\r\n                            n.checked = true;\r\n                        }\r\n                    })));\r\n                let options = [];\r\n                nodeList.forEach((o) => {\r\n                    options.push(o.value);\r\n                });\r\n                fieldsetOptionsMap.set(observers[i], options);\r\n            } else if (checkGroupObservers.includes(observers[i])) {\r\n                let nodeList = observers[i].querySelectorAll('[type=\"checkbox\"]');\r\n                fieldsetSetAdapter.set(observers[i], (val) => {\r\n                    nodeList.forEach((n) => {\r\n                        n.checked = val[n.value];\r\n                    });\r\n                });\r\n                let options = [];\r\n                nodeList.forEach((o) => {\r\n                    options.push(o.value);\r\n                });\r\n                fieldsetOptionsMap.set(observers[i], options);\r\n            } else if (observers[i].tagName === 'SELECT') {\r\n                let options = [];\r\n                observers[i].querySelectorAll('option').forEach((o) => {\r\n                    options.push(o.value);\r\n                });\r\n                selectOptionsMap.set(observers[i], options);\r\n            }\r\n\r\n            let observedValues = observers[i].getAttribute(config.MVC_OBSERVES).split(',');\r\n            for (let val in observedValues) {\r\n                model.addEventListener(config.MVC_PROPERTY_CHANGED, (e) => {\r\n                    if (observedValues[val] === e.detail.property && e.target !== observers[i]) {\r\n                        updateObserver(observers[i], e.detail.value);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        model.addEventListener(config.MVC_MODEL_MODIFIED, (e) => {\r\n            for (let i = 0; i < observers.length; i++) {\r\n                let observedValues = observers[i].getAttribute(config.MVC_OBSERVES).split(',');\r\n                for (let val in observedValues) {\r\n                    let updatedVal = e.detail.updates[observedValues[val]];\r\n                    if (updatedVal) {\r\n                        updateObserver(observers[i], updatedVal);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        //Assume that view DOM object is empty, and trigger a model update to ensure data is injected properly\r\n        model.modify(model.dataModel);\r\n    }\r\n}\r\n"],"file":"view.js"}