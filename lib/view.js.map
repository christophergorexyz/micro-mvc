{"version":3,"sources":["../src/view.js"],"names":["View","viewDOM","model","observers","querySelectorAll","MVC_OBSERVES","controls","MVC_CONTROLS","radioGroupObservers","MVC_RADIO_GROUP","radioGroupControls","checkGroupObservers","MVC_CHECK_GROUP","checkGroupControls","Array","prototype","map","call","o","c","getInputValue","control","inputType","getAttribute","TypeError","checked","value","getControlValue","tagName","fieldsetGetAdapter","get","innerHTML","updateInputValue","observer","updateObserver","hasAttribute","fieldsetOptionsMap","includes","RangeError","Object","keys","filter","v","length","fieldsetSetAdapter","selectOptionsMap","Map","i","addEventListeners","val","addEventListener","e","ce","CustomEvent","MVC_INPUT_CHANGED","target","detail","property","controlledValues","dispatchEvent","split","radioGroupName","radioForm","closest","nodeList","elements","document","getElementsByName","set","querySelector","forEach","n","result","options","push","observedValues","MVC_PROPERTY_CHANGED","MVC_MODEL_MODIFIED","updatedVal","updates","EventEmitter"],"mappings":"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","sourcesContent":["import {\r\n  MVC_CONTROLS,\r\n  MVC_OBSERVES,\r\n  MVC_RADIO_GROUP,\r\n  MVC_CHECK_GROUP,\r\n  MVC_PROPERTY_CHANGED,\r\n  MVC_MODEL_MODIFIED,\r\n  MVC_INPUT_CHANGED\r\n} from './config';\r\n\r\nimport EventEmitter from './event-emitter';\r\n\r\nexport default class View extends EventEmitter {\r\n  constructor(viewDOM, model) {\r\n    super();\r\n\r\n    let observers = viewDOM.querySelectorAll(`[${MVC_OBSERVES}]`);\r\n    let controls = viewDOM.querySelectorAll(`[${MVC_CONTROLS}]`);\r\n\r\n    let radioGroupObservers = viewDOM.querySelectorAll(`[${MVC_OBSERVES}][${MVC_RADIO_GROUP}]`);\r\n    let radioGroupControls = viewDOM.querySelectorAll(`[${MVC_CONTROLS}][${MVC_RADIO_GROUP}]`);\r\n\r\n    let checkGroupObservers = viewDOM.querySelectorAll(`[${MVC_OBSERVES}][${MVC_CHECK_GROUP}]`);\r\n    let checkGroupControls = viewDOM.querySelectorAll(`[${MVC_CONTROLS}][${MVC_CHECK_GROUP}]`);\r\n\r\n    radioGroupObservers = Array.prototype.map.call(radioGroupObservers, (o) => o);\r\n    radioGroupControls = Array.prototype.map.call(radioGroupControls, (c) => c);\r\n\r\n    checkGroupObservers = Array.prototype.map.call(checkGroupObservers, (o) => o);\r\n    checkGroupControls = Array.prototype.map.call(checkGroupControls, (c) => c);\r\n\r\n    function getInputValue(control) {\r\n      let inputType = control.getAttribute('type');\r\n\r\n      //most of these can just fall through to default, listing them exhaustively for thoroughness\r\n      switch (inputType) {\r\n        case 'button':\r\n        case 'file': //TODO: figure out if possible to handle file\r\n        case 'image':\r\n        case 'password': //you should never be allowed to control this programmatically\r\n        case 'reset':\r\n        case 'submit':\r\n          throw new TypeError(`Inputs of type ${inputType} cannot observe models`);\r\n          break;\r\n        case 'checkbox':\r\n          return control.checked;\r\n          break;\r\n          //case 'color': case 'date': case 'datetime-local': case 'email': case 'hidden': case 'month': case 'number': case 'radio': case 'range': case 'search': case 'tel': case 'text': case 'time': case 'url': case 'week':\r\n        default:\r\n          return control.value;\r\n          break;\r\n      }\r\n    }\r\n\r\n    function getControlValue(control) {\r\n      switch (control.tagName) {\r\n        case 'INPUT':\r\n          return getInputValue(control);\r\n        case 'FIELDSET':\r\n          return fieldsetGetAdapter.get(control)();\r\n        case 'SELECT':\r\n          return control.value;\r\n        default:\r\n          return control.innerHTML;\r\n      }\r\n    }\r\n\r\n    function updateInputValue(observer, value) {\r\n      let inputType = observer.getAttribute('type');\r\n      switch (inputType) {\r\n        case 'button':\r\n        case 'file': //TODO: figure out if possible to handle file\r\n        case 'image':\r\n        case 'reset':\r\n        case 'submit':\r\n          throw new TypeError(`Inputs of type ${inputType} do not have values`);\r\n          break;\r\n        case 'password': //you should never be allowed to control this programmatically\r\n          throw new TypeError(`Inputs of type ${inputType} may not be modified by controllers`);\r\n        case 'checkbox':\r\n          observer.checked = value;\r\n          break;\r\n          //TODO: implement errors for cases when types like numbers and ranges have min, max, and step attributes\r\n          //TODO: test dates\r\n          //case 'color': case 'date': case 'datetime-local': case 'email': case 'hidden': case 'month': case 'number': case 'radio': case 'range': case 'search': case 'tel': case 'text': case 'time': case 'url': case 'week':\r\n        default:\r\n          observer.value = value;\r\n          break;\r\n      }\r\n    }\r\n\r\n    function updateObserver(observer, value) {\r\n      switch (observer.tagName) {\r\n        case 'INPUT':\r\n          updateInputValue(observer, value);\r\n          break;\r\n        case 'FIELDSET':\r\n          if (observer.hasAttribute(MVC_RADIO_GROUP) && !fieldsetOptionsMap.get(observer).includes(value)) {\r\n            throw new RangeError(`The value supplied, ${value}, is not a valid option`);\r\n          } else if (observer.hasAttribute(MVC_CHECK_GROUP) && Object.keys(value).filter(v => !fieldsetOptionsMap.get(observer).includes(v)).length) {\r\n            throw new RangeError(`At least one of the values supplied, ${value}, is not a valid option`);\r\n          }\r\n          fieldsetSetAdapter.get(observer)(value);\r\n          break;\r\n        case 'SELECT':\r\n          if (!selectOptionsMap.get(observer).includes(value)) {\r\n            throw new RangeError(`The value supplied, ${value}, is not a valid option`);\r\n          }\r\n          observer.value = value;\r\n          break;\r\n        default:\r\n          observer.innerHTML = value;\r\n          break;\r\n      }\r\n    }\r\n\r\n    let fieldsetGetAdapter = new Map();\r\n    for (let i = 0; i < controls.length; i++) {\r\n      let addEventListeners = (c) => {\r\n        for (let val in controlledValues) {\r\n          c.addEventListener('change', (e) => {\r\n            let ce = new CustomEvent(MVC_INPUT_CHANGED, {\r\n              target: e.target,\r\n              detail: {\r\n                property: controlledValues[val],\r\n                value: getControlValue(controls[i])\r\n              }\r\n            });\r\n            model[controlledValues[val]] = getControlValue(controls[i]);\r\n            this.dispatchEvent(ce);\r\n          });\r\n        }\r\n      }\r\n\r\n      let controlledValues = controls[i].getAttribute(MVC_CONTROLS).split(',');\r\n      if (radioGroupControls.includes(controls[i])) {\r\n        let radioGroupName = controls[i].getAttribute(MVC_RADIO_GROUP);\r\n\r\n        let radioForm = controls[i].closest('form');\r\n        let nodeList = radioForm ? radioForm.elements[radioGroupName] : document.getElementsByName(radioGroupName);\r\n\r\n        fieldsetGetAdapter.set(controls[i], (radioForm ?\r\n          () => nodeList.value :\r\n          () => controls[i].querySelector(':checked').value\r\n        ));\r\n\r\n        nodeList.forEach((n) => {\r\n          addEventListeners(n);\r\n        });\r\n      } else if (checkGroupControls.includes(controls[i])) {\r\n        let nodeList = controls[i].querySelectorAll('[type=\"checkbox\"]');\r\n\r\n        fieldsetGetAdapter.set(controls[i], () => {\r\n          let result = {};\r\n          nodeList.forEach((n) => {\r\n            result[n.value] = n.checked;\r\n          });\r\n          return result;\r\n        });\r\n\r\n        nodeList.forEach((n) => {\r\n          addEventListeners(n);\r\n        });\r\n      } else {\r\n        addEventListeners(controls[i]);\r\n      }\r\n    }\r\n\r\n    let fieldsetOptionsMap = new Map();\r\n    let selectOptionsMap = new Map();\r\n    let fieldsetSetAdapter = new Map();\r\n    for (let i = 0; i < observers.length; i++) {\r\n      if (radioGroupObservers.includes(observers[i])) {\r\n        let radioGroupName = observers[i].getAttribute(MVC_RADIO_GROUP);\r\n\r\n        let radioForm = observers[i].closest('form');\r\n        let nodeList = radioForm ? radioForm.elements[radioGroupName] : document.getElementsByName(radioGroupName);\r\n        fieldsetSetAdapter.set(observers[i], (radioForm ?\r\n          (val) => nodeList.value = val :\r\n          (val) => nodeList.forEach((n) => {\r\n            n.checked = false;\r\n            if (n.value === val) {\r\n              n.checked = true;\r\n            }\r\n          })));\r\n        let options = [];\r\n        nodeList.forEach((o) => {\r\n          options.push(o.value);\r\n        });\r\n        fieldsetOptionsMap.set(observers[i], options)\r\n      } else if (checkGroupObservers.includes(observers[i])) {\r\n        let nodeList = observers[i].querySelectorAll('[type=\"checkbox\"]');\r\n        fieldsetSetAdapter.set(observers[i], (val) => {\r\n          nodeList.forEach((n) => {\r\n            n.checked = val[n.value];\r\n          });\r\n        });\r\n        let options = [];\r\n        nodeList.forEach((o) => {\r\n          options.push(o.value);\r\n        });\r\n        fieldsetOptionsMap.set(observers[i], options);\r\n      } else if (observers[i].tagName === 'SELECT') {\r\n        let options = [];\r\n        observers[i].querySelectorAll('option').forEach((o) => {\r\n          options.push(o.value);\r\n        });\r\n        selectOptionsMap.set(observers[i], options);\r\n      }\r\n\r\n      let observedValues = observers[i].getAttribute(MVC_OBSERVES).split(',');\r\n      for (let val in observedValues) {\r\n        model.addEventListener(MVC_PROPERTY_CHANGED, (e) => {\r\n          if (observedValues[val] === e.detail.property && e.target !== observers[i]) {\r\n            updateObserver(observers[i], e.detail.value);\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    model.addEventListener(MVC_MODEL_MODIFIED, (e) => {\r\n      for (let i = 0; i < observers.length; i++) {\r\n        let observedValues = observers[i].getAttribute(MVC_OBSERVES).split(',');\r\n        for (let val in observedValues) {\r\n          let updatedVal = e.detail.updates[observedValues[val]];\r\n          if (updatedVal) {\r\n            updateObserver(observers[i], updatedVal);\r\n          }\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"file":"view.js"}